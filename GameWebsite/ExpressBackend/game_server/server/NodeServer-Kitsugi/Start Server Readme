To start a server:
    Example code is in run.js
    Put that into the backend and pass it a random port.
    If an error is returned, pick a different port to try to run the server on within the given port range.

To call the function: Example Port = 1234
    run(1234);


What this function does is:
    You will pass in a port which you want to run a gameserver on.
    "exec" is a command which will run the os level command within it, this command is run as a child process and will create its own procces.
    This way all gameservers will run as their own processes and with the given port that you specify.


Please only generate random numbers between these port ranges for each specified game.
This way no two games ports will overlap with each other.

    Kintsugi Port Range: 49152 - 50000

Update Database with new server info:
    After the server begins and no error is returned,
    send a REST request, or however you want to update the database,
    with the port you started the server on, 
    the username of who started it and any other parameters the database wants to store.

Done:
     should now be started and the database updated with a running game.


Post Game:
    The gameserver will inform the database when a game ends and remove it from the running ports in the database.
    The gameserver will also inform the database of the outcome of the game, winner, score, players, etc.
